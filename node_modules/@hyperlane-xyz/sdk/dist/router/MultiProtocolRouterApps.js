"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiProtocolGasRouterApp = exports.MultiProtocolRouterApp = void 0;
const utils_1 = require("@hyperlane-xyz/utils");
const MultiProtocolApp_1 = require("../app/MultiProtocolApp");
const EvmRouterAdapter_1 = require("./adapters/EvmRouterAdapter");
const SealevelRouterAdapter_1 = require("./adapters/SealevelRouterAdapter");
class MultiProtocolRouterApp extends MultiProtocolApp_1.MultiProtocolApp {
    protocolToAdapter(protocol) {
        // Casts are required here to allow for default adapters while still
        // enabling extensible generic types
        if (protocol === utils_1.ProtocolType.Ethereum)
            return EvmRouterAdapter_1.EvmRouterAdapter;
        if (protocol === utils_1.ProtocolType.Sealevel)
            return SealevelRouterAdapter_1.SealevelRouterAdapter;
        throw new Error(`No adapter for protocol ${protocol}`);
    }
    router(chain) {
        return this.addresses[chain].router;
    }
    interchainSecurityModules() {
        return this.adapterMap((_, adapter) => adapter.interchainSecurityModule());
    }
    owners() {
        return this.adapterMap((_, adapter) => adapter.owner());
    }
    remoteRouters(origin) {
        return this.adapter(origin).remoteRouters();
    }
}
exports.MultiProtocolRouterApp = MultiProtocolRouterApp;
class MultiProtocolGasRouterApp extends MultiProtocolRouterApp {
    protocolToAdapter(protocol) {
        // Casts are required here to allow for default adapters while still
        // enabling extensible generic types
        if (protocol === utils_1.ProtocolType.Ethereum)
            return EvmRouterAdapter_1.EvmGasRouterAdapter;
        if (protocol === utils_1.ProtocolType.Sealevel)
            return SealevelRouterAdapter_1.SealevelGasRouterAdapter;
        throw new Error(`No adapter for protocol ${protocol}`);
    }
    async quoteGasPayment(origin, destination) {
        return this.adapter(origin).quoteGasPayment(destination);
    }
}
exports.MultiProtocolGasRouterApp = MultiProtocolGasRouterApp;
//# sourceMappingURL=MultiProtocolRouterApps.js.map