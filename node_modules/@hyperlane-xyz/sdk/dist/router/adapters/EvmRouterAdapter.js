"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmGasRouterAdapter = exports.EvmRouterAdapter = void 0;
const core_1 = require("@hyperlane-xyz/core");
const utils_1 = require("@hyperlane-xyz/utils");
const MultiProtocolApp_1 = require("../../app/MultiProtocolApp");
class EvmRouterAdapter extends MultiProtocolApp_1.BaseEvmAdapter {
    constructor(chainName, multiProvider, addresses) {
        super(chainName, multiProvider, addresses);
        this.chainName = chainName;
        this.multiProvider = multiProvider;
        this.addresses = addresses;
    }
    interchainSecurityModule() {
        return this.getConnectedContract().interchainSecurityModule();
    }
    owner() {
        return this.getConnectedContract().owner();
    }
    remoteDomains() {
        return this.getConnectedContract().domains();
    }
    async remoteRouter(remoteDomain) {
        const routerAddressesAsBytes32 = await this.getConnectedContract().routers(remoteDomain);
        return (0, utils_1.bytes32ToAddress)(routerAddressesAsBytes32);
    }
    async remoteRouters() {
        const domains = await this.remoteDomains();
        const routers = await Promise.all(domains.map((d) => this.remoteRouter(d)));
        return domains.map((d, i) => ({ domain: d, address: routers[i] }));
    }
    getConnectedContract() {
        return core_1.Router__factory.connect(this.addresses.router, this.getProvider());
    }
}
exports.EvmRouterAdapter = EvmRouterAdapter;
class EvmGasRouterAdapter extends EvmRouterAdapter {
    async quoteGasPayment(destination) {
        const destDomain = this.multiProvider.getDomainId(destination);
        const amount = await this.getConnectedContract().quoteGasPayment(destDomain);
        return amount.toString();
    }
    getConnectedContract() {
        return core_1.GasRouter__factory.connect(this.addresses.router, this.getProvider());
    }
}
exports.EvmGasRouterAdapter = EvmGasRouterAdapter;
//# sourceMappingURL=EvmRouterAdapter.js.map