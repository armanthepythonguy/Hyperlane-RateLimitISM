/**
 * The types defined here are the source of truth for chain metadata.
 * ANY CHANGES HERE NEED TO BE REFLECTED IN HYPERLANE-BASE CONFIG PARSING.
 */
import { z } from 'zod';
import { ProtocolType } from '@hyperlane-xyz/utils';
import { MultiProvider } from '../providers/MultiProvider';
import { ChainMap, ChainName } from '../types';
import { HyperlaneDeploymentArtifacts } from './deploymentArtifacts';
export declare enum AgentConnectionType {
    Http = "http",
    Ws = "ws",
    HttpQuorum = "httpQuorum",
    HttpFallback = "httpFallback"
}
export declare enum AgentConsensusType {
    Fallback = "fallback",
    Quorum = "quorum"
}
export declare enum AgentLogLevel {
    Off = "off",
    Error = "error",
    Warn = "warn",
    Info = "info",
    Debug = "debug",
    Trace = "trace"
}
export declare enum AgentLogFormat {
    Json = "json",
    Compact = "compact",
    Full = "full",
    Pretty = "pretty"
}
export declare enum AgentIndexMode {
    Block = "block",
    Sequence = "sequence"
}
export declare const AgentSignerSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    key: string;
    type?: "hexKey" | undefined;
}, {
    key: string;
    type?: "hexKey" | undefined;
}>, z.ZodObject<{
    type: z.ZodOptional<z.ZodLiteral<"aws">>;
    id: z.ZodString;
    region: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    region: string;
    type?: "aws" | undefined;
}, {
    id: string;
    region: string;
    type?: "aws" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"node">;
}, "strip", z.ZodTypeAny, {
    type: "node";
}, {
    type: "node";
}>]>;
export type AgentSignerV2 = z.infer<typeof AgentSignerSchema>;
export declare const AgentChainMetadataSchema: z.ZodObject<{
    name: z.ZodString;
    protocol: z.ZodNativeEnum<typeof ProtocolType>;
    chainId: z.ZodNumber;
    interchainSecurityModule: z.ZodOptional<z.ZodString>;
    interchainGasPaymaster: z.ZodString;
    mailbox: z.ZodString;
    domainId: z.ZodOptional<z.ZodNumber>;
    displayName: z.ZodOptional<z.ZodString>;
    displayNameShort: z.ZodOptional<z.ZodString>;
    logoURI: z.ZodOptional<z.ZodString>;
    nativeToken: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        symbol: z.ZodString;
        decimals: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        symbol: string;
        name: string;
        decimals: number;
    }, {
        symbol: string;
        name: string;
        decimals: number;
    }>>;
    rpcUrls: z.ZodArray<z.ZodObject<{
        http: z.ZodString;
        webSocket: z.ZodOptional<z.ZodString>;
        pagination: z.ZodOptional<z.ZodObject<{
            maxBlockRange: z.ZodOptional<z.ZodNumber>;
            minBlockNumber: z.ZodOptional<z.ZodNumber>;
            maxBlockAge: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }>>;
        retry: z.ZodOptional<z.ZodObject<{
            maxRequests: z.ZodNumber;
            baseRetryMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxRequests: number;
            baseRetryMs: number;
        }, {
            maxRequests: number;
            baseRetryMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }>, "atleastone">;
    blockExplorers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        url: z.ZodString;
        apiUrl: z.ZodString;
        apiKey: z.ZodOptional<z.ZodString>;
        family: z.ZodOptional<z.ZodNativeEnum<typeof import("./chainMetadataTypes").ExplorerFamily>>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
    }, {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
    }>, "many">>;
    blocks: z.ZodOptional<z.ZodObject<{
        confirmations: z.ZodNumber;
        reorgPeriod: z.ZodOptional<z.ZodNumber>;
        estimateBlockTime: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    }, {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    }>>;
    transactionOverrides: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    gasCurrencyCoinGeckoId: z.ZodOptional<z.ZodString>;
    gnosisSafeTransactionServiceUrl: z.ZodOptional<z.ZodString>;
    isTestnet: z.ZodOptional<z.ZodBoolean>;
    validatorAnnounce: z.ZodString;
    customRpcUrls: z.ZodOptional<z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
        http: z.ZodString;
        webSocket: z.ZodOptional<z.ZodString>;
        pagination: z.ZodOptional<z.ZodObject<{
            maxBlockRange: z.ZodOptional<z.ZodNumber>;
            minBlockNumber: z.ZodOptional<z.ZodNumber>;
            maxBlockAge: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }, {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        }>>;
        retry: z.ZodOptional<z.ZodObject<{
            maxRequests: z.ZodNumber;
            baseRetryMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            maxRequests: number;
            baseRetryMs: number;
        }, {
            maxRequests: number;
            baseRetryMs: number;
        }>>;
        priority: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
        priority?: number | undefined;
    }, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
        priority?: number | undefined;
    }>>, Record<string, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
        priority?: number | undefined;
    }>, Record<string, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
        priority?: number | undefined;
    }>>>;
    rpcConsensusType: z.ZodOptional<z.ZodNativeEnum<typeof AgentConsensusType>>;
    signer: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        type?: "hexKey" | undefined;
    }, {
        key: string;
        type?: "hexKey" | undefined;
    }>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"aws">>;
        id: z.ZodString;
        region: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"node">;
    }, "strip", z.ZodTypeAny, {
        type: "node";
    }, {
        type: "node";
    }>]>>;
    index: z.ZodOptional<z.ZodObject<{
        from: z.ZodOptional<z.ZodNumber>;
        chunk: z.ZodOptional<z.ZodNumber>;
        mode: z.ZodOptional<z.ZodNativeEnum<typeof AgentIndexMode>>;
    }, "strip", z.ZodTypeAny, {
        from?: number | undefined;
        chunk?: number | undefined;
        mode?: AgentIndexMode | undefined;
    }, {
        from?: number | undefined;
        chunk?: number | undefined;
        mode?: AgentIndexMode | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    protocol: ProtocolType;
    chainId: number;
    interchainGasPaymaster: string;
    mailbox: string;
    rpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    validatorAnnounce: string;
    interchainSecurityModule?: string | undefined;
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    logoURI?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
    customRpcUrls?: Record<string, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
        priority?: number | undefined;
    }> | undefined;
    rpcConsensusType?: AgentConsensusType | undefined;
    signer?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    index?: {
        from?: number | undefined;
        chunk?: number | undefined;
        mode?: AgentIndexMode | undefined;
    } | undefined;
}, {
    name: string;
    protocol: ProtocolType;
    chainId: number;
    interchainGasPaymaster: string;
    mailbox: string;
    rpcUrls: [{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }, ...{
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
    }[]];
    validatorAnnounce: string;
    interchainSecurityModule?: string | undefined;
    domainId?: number | undefined;
    displayName?: string | undefined;
    displayNameShort?: string | undefined;
    logoURI?: string | undefined;
    nativeToken?: {
        symbol: string;
        name: string;
        decimals: number;
    } | undefined;
    blockExplorers?: {
        url: string;
        name: string;
        apiUrl: string;
        apiKey?: string | undefined;
        family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
    }[] | undefined;
    blocks?: {
        confirmations: number;
        reorgPeriod?: number | undefined;
        estimateBlockTime?: number | undefined;
    } | undefined;
    transactionOverrides?: {} | undefined;
    gasCurrencyCoinGeckoId?: string | undefined;
    gnosisSafeTransactionServiceUrl?: string | undefined;
    isTestnet?: boolean | undefined;
    customRpcUrls?: Record<string, {
        http: string;
        webSocket?: string | undefined;
        pagination?: {
            maxBlockRange?: number | undefined;
            minBlockNumber?: number | undefined;
            maxBlockAge?: number | undefined;
        } | undefined;
        retry?: {
            maxRequests: number;
            baseRetryMs: number;
        } | undefined;
        priority?: number | undefined;
    }> | undefined;
    rpcConsensusType?: AgentConsensusType | undefined;
    signer?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    index?: {
        from?: number | undefined;
        chunk?: number | undefined;
        mode?: AgentIndexMode | undefined;
    } | undefined;
}>;
export type AgentChainMetadata = z.infer<typeof AgentChainMetadataSchema>;
export declare const AgentConfigSchema: z.ZodObject<{
    metricsPort: z.ZodOptional<z.ZodNumber>;
    chains: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodString;
        protocol: z.ZodNativeEnum<typeof ProtocolType>;
        chainId: z.ZodNumber;
        interchainSecurityModule: z.ZodOptional<z.ZodString>;
        interchainGasPaymaster: z.ZodString;
        mailbox: z.ZodString;
        domainId: z.ZodOptional<z.ZodNumber>;
        displayName: z.ZodOptional<z.ZodString>;
        displayNameShort: z.ZodOptional<z.ZodString>;
        logoURI: z.ZodOptional<z.ZodString>;
        nativeToken: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            symbol: z.ZodString;
            decimals: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            symbol: string;
            name: string;
            decimals: number;
        }, {
            symbol: string;
            name: string;
            decimals: number;
        }>>;
        rpcUrls: z.ZodArray<z.ZodObject<{
            http: z.ZodString;
            webSocket: z.ZodOptional<z.ZodString>;
            pagination: z.ZodOptional<z.ZodObject<{
                maxBlockRange: z.ZodOptional<z.ZodNumber>;
                minBlockNumber: z.ZodOptional<z.ZodNumber>;
                maxBlockAge: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }>>;
            retry: z.ZodOptional<z.ZodObject<{
                maxRequests: z.ZodNumber;
                baseRetryMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxRequests: number;
                baseRetryMs: number;
            }, {
                maxRequests: number;
                baseRetryMs: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }>, "atleastone">;
        blockExplorers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            url: z.ZodString;
            apiUrl: z.ZodString;
            apiKey: z.ZodOptional<z.ZodString>;
            family: z.ZodOptional<z.ZodNativeEnum<typeof import("./chainMetadataTypes").ExplorerFamily>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }, {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }>, "many">>;
        blocks: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodNumber;
            reorgPeriod: z.ZodOptional<z.ZodNumber>;
            estimateBlockTime: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        }, {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        }>>;
        transactionOverrides: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        gasCurrencyCoinGeckoId: z.ZodOptional<z.ZodString>;
        gnosisSafeTransactionServiceUrl: z.ZodOptional<z.ZodString>;
        isTestnet: z.ZodOptional<z.ZodBoolean>;
        validatorAnnounce: z.ZodString;
        customRpcUrls: z.ZodOptional<z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
            http: z.ZodString;
            webSocket: z.ZodOptional<z.ZodString>;
            pagination: z.ZodOptional<z.ZodObject<{
                maxBlockRange: z.ZodOptional<z.ZodNumber>;
                minBlockNumber: z.ZodOptional<z.ZodNumber>;
                maxBlockAge: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }>>;
            retry: z.ZodOptional<z.ZodObject<{
                maxRequests: z.ZodNumber;
                baseRetryMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxRequests: number;
                baseRetryMs: number;
            }, {
                maxRequests: number;
                baseRetryMs: number;
            }>>;
            priority: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>>, Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>, Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>>>;
        rpcConsensusType: z.ZodOptional<z.ZodNativeEnum<typeof AgentConsensusType>>;
        signer: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            key: string;
            type?: "hexKey" | undefined;
        }, {
            key: string;
            type?: "hexKey" | undefined;
        }>, z.ZodObject<{
            type: z.ZodOptional<z.ZodLiteral<"aws">>;
            id: z.ZodString;
            region: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            region: string;
            type?: "aws" | undefined;
        }, {
            id: string;
            region: string;
            type?: "aws" | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"node">;
        }, "strip", z.ZodTypeAny, {
            type: "node";
        }, {
            type: "node";
        }>]>>;
        index: z.ZodOptional<z.ZodObject<{
            from: z.ZodOptional<z.ZodNumber>;
            chunk: z.ZodOptional<z.ZodNumber>;
            mode: z.ZodOptional<z.ZodNativeEnum<typeof AgentIndexMode>>;
        }, "strip", z.ZodTypeAny, {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        }, {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>>, Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>, Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>>;
    defaultSigner: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        type?: "hexKey" | undefined;
    }, {
        key: string;
        type?: "hexKey" | undefined;
    }>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"aws">>;
        id: z.ZodString;
        region: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"node">;
    }, "strip", z.ZodTypeAny, {
        type: "node";
    }, {
        type: "node";
    }>]>>;
    defaultRpcConsensusType: z.ZodOptional<z.ZodNativeEnum<typeof AgentConsensusType>>;
    log: z.ZodOptional<z.ZodObject<{
        format: z.ZodOptional<z.ZodNativeEnum<typeof AgentLogFormat>>;
        level: z.ZodOptional<z.ZodNativeEnum<typeof AgentLogLevel>>;
    }, "strip", z.ZodTypeAny, {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    }, {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    chains: Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>;
    metricsPort?: number | undefined;
    defaultSigner?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    defaultRpcConsensusType?: AgentConsensusType | undefined;
    log?: {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    } | undefined;
}, {
    chains: Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>;
    metricsPort?: number | undefined;
    defaultSigner?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    defaultRpcConsensusType?: AgentConsensusType | undefined;
    log?: {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    } | undefined;
}>;
declare const GasPaymentEnforcementSchema: z.ZodArray<z.ZodUnion<[z.ZodObject<{
    matchingList: z.ZodOptional<z.ZodArray<z.ZodObject<{
        originDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        senderAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
        destinationDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        recipientAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
    }, "strip", z.ZodTypeAny, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }>, "atleastone">>;
    type: z.ZodOptional<z.ZodLiteral<"none">>;
}, "strip", z.ZodTypeAny, {
    matchingList?: [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    type?: "none" | undefined;
}, {
    matchingList?: [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    type?: "none" | undefined;
}>, z.ZodObject<{
    matchingList: z.ZodOptional<z.ZodArray<z.ZodObject<{
        originDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        senderAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
        destinationDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        recipientAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
    }, "strip", z.ZodTypeAny, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }>, "atleastone">>;
    type: z.ZodOptional<z.ZodLiteral<"minimum">>;
    payment: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    payment: string | number;
    matchingList?: [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    type?: "minimum" | undefined;
}, {
    payment: string | number;
    matchingList?: [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    type?: "minimum" | undefined;
}>, z.ZodObject<{
    matchingList: z.ZodOptional<z.ZodArray<z.ZodObject<{
        originDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        senderAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
        destinationDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        recipientAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
    }, "strip", z.ZodTypeAny, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }>, "atleastone">>;
    type: z.ZodLiteral<"onChainFeeQuoting">;
    gasFraction: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "onChainFeeQuoting";
    matchingList?: [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    gasFraction?: string | undefined;
}, {
    type: "onChainFeeQuoting";
    matchingList?: [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    gasFraction?: string | undefined;
}>]>, "many">;
export type GasPaymentEnforcement = z.infer<typeof GasPaymentEnforcementSchema>;
export declare const RelayerAgentConfigSchema: z.ZodObject<{
    metricsPort: z.ZodOptional<z.ZodNumber>;
    chains: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodString;
        protocol: z.ZodNativeEnum<typeof ProtocolType>;
        chainId: z.ZodNumber;
        interchainSecurityModule: z.ZodOptional<z.ZodString>;
        interchainGasPaymaster: z.ZodString;
        mailbox: z.ZodString;
        domainId: z.ZodOptional<z.ZodNumber>;
        displayName: z.ZodOptional<z.ZodString>;
        displayNameShort: z.ZodOptional<z.ZodString>;
        logoURI: z.ZodOptional<z.ZodString>;
        nativeToken: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            symbol: z.ZodString;
            decimals: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            symbol: string;
            name: string;
            decimals: number;
        }, {
            symbol: string;
            name: string;
            decimals: number;
        }>>;
        rpcUrls: z.ZodArray<z.ZodObject<{
            http: z.ZodString;
            webSocket: z.ZodOptional<z.ZodString>;
            pagination: z.ZodOptional<z.ZodObject<{
                maxBlockRange: z.ZodOptional<z.ZodNumber>;
                minBlockNumber: z.ZodOptional<z.ZodNumber>;
                maxBlockAge: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }>>;
            retry: z.ZodOptional<z.ZodObject<{
                maxRequests: z.ZodNumber;
                baseRetryMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxRequests: number;
                baseRetryMs: number;
            }, {
                maxRequests: number;
                baseRetryMs: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }>, "atleastone">;
        blockExplorers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            url: z.ZodString;
            apiUrl: z.ZodString;
            apiKey: z.ZodOptional<z.ZodString>;
            family: z.ZodOptional<z.ZodNativeEnum<typeof import("./chainMetadataTypes").ExplorerFamily>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }, {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }>, "many">>;
        blocks: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodNumber;
            reorgPeriod: z.ZodOptional<z.ZodNumber>;
            estimateBlockTime: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        }, {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        }>>;
        transactionOverrides: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        gasCurrencyCoinGeckoId: z.ZodOptional<z.ZodString>;
        gnosisSafeTransactionServiceUrl: z.ZodOptional<z.ZodString>;
        isTestnet: z.ZodOptional<z.ZodBoolean>;
        validatorAnnounce: z.ZodString;
        customRpcUrls: z.ZodOptional<z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
            http: z.ZodString;
            webSocket: z.ZodOptional<z.ZodString>;
            pagination: z.ZodOptional<z.ZodObject<{
                maxBlockRange: z.ZodOptional<z.ZodNumber>;
                minBlockNumber: z.ZodOptional<z.ZodNumber>;
                maxBlockAge: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }>>;
            retry: z.ZodOptional<z.ZodObject<{
                maxRequests: z.ZodNumber;
                baseRetryMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxRequests: number;
                baseRetryMs: number;
            }, {
                maxRequests: number;
                baseRetryMs: number;
            }>>;
            priority: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>>, Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>, Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>>>;
        rpcConsensusType: z.ZodOptional<z.ZodNativeEnum<typeof AgentConsensusType>>;
        signer: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            key: string;
            type?: "hexKey" | undefined;
        }, {
            key: string;
            type?: "hexKey" | undefined;
        }>, z.ZodObject<{
            type: z.ZodOptional<z.ZodLiteral<"aws">>;
            id: z.ZodString;
            region: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            region: string;
            type?: "aws" | undefined;
        }, {
            id: string;
            region: string;
            type?: "aws" | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"node">;
        }, "strip", z.ZodTypeAny, {
            type: "node";
        }, {
            type: "node";
        }>]>>;
        index: z.ZodOptional<z.ZodObject<{
            from: z.ZodOptional<z.ZodNumber>;
            chunk: z.ZodOptional<z.ZodNumber>;
            mode: z.ZodOptional<z.ZodNativeEnum<typeof AgentIndexMode>>;
        }, "strip", z.ZodTypeAny, {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        }, {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>>, Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>, Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>>;
    defaultSigner: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        type?: "hexKey" | undefined;
    }, {
        key: string;
        type?: "hexKey" | undefined;
    }>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"aws">>;
        id: z.ZodString;
        region: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"node">;
    }, "strip", z.ZodTypeAny, {
        type: "node";
    }, {
        type: "node";
    }>]>>;
    defaultRpcConsensusType: z.ZodOptional<z.ZodNativeEnum<typeof AgentConsensusType>>;
    log: z.ZodOptional<z.ZodObject<{
        format: z.ZodOptional<z.ZodNativeEnum<typeof AgentLogFormat>>;
        level: z.ZodOptional<z.ZodNativeEnum<typeof AgentLogLevel>>;
    }, "strip", z.ZodTypeAny, {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    }, {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    }>>;
    db: z.ZodOptional<z.ZodString>;
    relayChains: z.ZodString;
    gasPaymentEnforcement: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodUnion<[z.ZodObject<{
        matchingList: z.ZodOptional<z.ZodArray<z.ZodObject<{
            originDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
            senderAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
            destinationDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
            recipientAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
        }, "strip", z.ZodTypeAny, {
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, {
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }>, "atleastone">>;
        type: z.ZodOptional<z.ZodLiteral<"none">>;
    }, "strip", z.ZodTypeAny, {
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        type?: "none" | undefined;
    }, {
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        type?: "none" | undefined;
    }>, z.ZodObject<{
        matchingList: z.ZodOptional<z.ZodArray<z.ZodObject<{
            originDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
            senderAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
            destinationDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
            recipientAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
        }, "strip", z.ZodTypeAny, {
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, {
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }>, "atleastone">>;
        type: z.ZodOptional<z.ZodLiteral<"minimum">>;
        payment: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        payment: string | number;
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        type?: "minimum" | undefined;
    }, {
        payment: string | number;
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        type?: "minimum" | undefined;
    }>, z.ZodObject<{
        matchingList: z.ZodOptional<z.ZodArray<z.ZodObject<{
            originDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
            senderAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
            destinationDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
            recipientAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
        }, "strip", z.ZodTypeAny, {
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, {
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }>, "atleastone">>;
        type: z.ZodLiteral<"onChainFeeQuoting">;
        gasFraction: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "onChainFeeQuoting";
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        gasFraction?: string | undefined;
    }, {
        type: "onChainFeeQuoting";
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        gasFraction?: string | undefined;
    }>]>, "many">, z.ZodString]>>;
    whitelist: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        originDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        senderAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
        destinationDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        recipientAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
    }, "strip", z.ZodTypeAny, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }>, "atleastone">, z.ZodString]>>;
    blacklist: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        originDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        senderAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
        destinationDomain: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodNumber, z.ZodArray<z.ZodNumber, "atleastone">]>>;
        recipientAddress: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"*">, z.ZodString, z.ZodArray<z.ZodString, "atleastone">]>>;
    }, "strip", z.ZodTypeAny, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, {
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }>, "atleastone">, z.ZodString]>>;
    transactionGasLimit: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    skipTransactionGasLimitFor: z.ZodOptional<z.ZodString>;
    allowLocalCheckpointSyncers: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    chains: Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>;
    relayChains: string;
    metricsPort?: number | undefined;
    defaultSigner?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    defaultRpcConsensusType?: AgentConsensusType | undefined;
    log?: {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    } | undefined;
    db?: string | undefined;
    gasPaymentEnforcement?: string | ({
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        type?: "none" | undefined;
    } | {
        payment: string | number;
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        type?: "minimum" | undefined;
    } | {
        type: "onChainFeeQuoting";
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        gasFraction?: string | undefined;
    })[] | undefined;
    whitelist?: string | [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    blacklist?: string | [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    transactionGasLimit?: string | number | undefined;
    skipTransactionGasLimitFor?: string | undefined;
    allowLocalCheckpointSyncers?: boolean | undefined;
}, {
    chains: Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>;
    relayChains: string;
    metricsPort?: number | undefined;
    defaultSigner?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    defaultRpcConsensusType?: AgentConsensusType | undefined;
    log?: {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    } | undefined;
    db?: string | undefined;
    gasPaymentEnforcement?: string | ({
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        type?: "none" | undefined;
    } | {
        payment: string | number;
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        type?: "minimum" | undefined;
    } | {
        type: "onChainFeeQuoting";
        matchingList?: [{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }, ...{
            originDomain?: number | "*" | [number, ...number[]] | undefined;
            senderAddress?: string | [string, ...string[]] | undefined;
            destinationDomain?: number | "*" | [number, ...number[]] | undefined;
            recipientAddress?: string | [string, ...string[]] | undefined;
        }[]] | undefined;
        gasFraction?: string | undefined;
    })[] | undefined;
    whitelist?: string | [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    blacklist?: string | [{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }, ...{
        originDomain?: number | "*" | [number, ...number[]] | undefined;
        senderAddress?: string | [string, ...string[]] | undefined;
        destinationDomain?: number | "*" | [number, ...number[]] | undefined;
        recipientAddress?: string | [string, ...string[]] | undefined;
    }[]] | undefined;
    transactionGasLimit?: string | number | undefined;
    skipTransactionGasLimitFor?: string | undefined;
    allowLocalCheckpointSyncers?: boolean | undefined;
}>;
export type RelayerConfig = z.infer<typeof RelayerAgentConfigSchema>;
export declare const ScraperAgentConfigSchema: z.ZodObject<{
    metricsPort: z.ZodOptional<z.ZodNumber>;
    chains: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodString;
        protocol: z.ZodNativeEnum<typeof ProtocolType>;
        chainId: z.ZodNumber;
        interchainSecurityModule: z.ZodOptional<z.ZodString>;
        interchainGasPaymaster: z.ZodString;
        mailbox: z.ZodString;
        domainId: z.ZodOptional<z.ZodNumber>;
        displayName: z.ZodOptional<z.ZodString>;
        displayNameShort: z.ZodOptional<z.ZodString>;
        logoURI: z.ZodOptional<z.ZodString>;
        nativeToken: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            symbol: z.ZodString;
            decimals: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            symbol: string;
            name: string;
            decimals: number;
        }, {
            symbol: string;
            name: string;
            decimals: number;
        }>>;
        rpcUrls: z.ZodArray<z.ZodObject<{
            http: z.ZodString;
            webSocket: z.ZodOptional<z.ZodString>;
            pagination: z.ZodOptional<z.ZodObject<{
                maxBlockRange: z.ZodOptional<z.ZodNumber>;
                minBlockNumber: z.ZodOptional<z.ZodNumber>;
                maxBlockAge: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }>>;
            retry: z.ZodOptional<z.ZodObject<{
                maxRequests: z.ZodNumber;
                baseRetryMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxRequests: number;
                baseRetryMs: number;
            }, {
                maxRequests: number;
                baseRetryMs: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }>, "atleastone">;
        blockExplorers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            url: z.ZodString;
            apiUrl: z.ZodString;
            apiKey: z.ZodOptional<z.ZodString>;
            family: z.ZodOptional<z.ZodNativeEnum<typeof import("./chainMetadataTypes").ExplorerFamily>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }, {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }>, "many">>;
        blocks: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodNumber;
            reorgPeriod: z.ZodOptional<z.ZodNumber>;
            estimateBlockTime: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        }, {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        }>>;
        transactionOverrides: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        gasCurrencyCoinGeckoId: z.ZodOptional<z.ZodString>;
        gnosisSafeTransactionServiceUrl: z.ZodOptional<z.ZodString>;
        isTestnet: z.ZodOptional<z.ZodBoolean>;
        validatorAnnounce: z.ZodString;
        customRpcUrls: z.ZodOptional<z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
            http: z.ZodString;
            webSocket: z.ZodOptional<z.ZodString>;
            pagination: z.ZodOptional<z.ZodObject<{
                maxBlockRange: z.ZodOptional<z.ZodNumber>;
                minBlockNumber: z.ZodOptional<z.ZodNumber>;
                maxBlockAge: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }>>;
            retry: z.ZodOptional<z.ZodObject<{
                maxRequests: z.ZodNumber;
                baseRetryMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxRequests: number;
                baseRetryMs: number;
            }, {
                maxRequests: number;
                baseRetryMs: number;
            }>>;
            priority: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>>, Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>, Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>>>;
        rpcConsensusType: z.ZodOptional<z.ZodNativeEnum<typeof AgentConsensusType>>;
        signer: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            key: string;
            type?: "hexKey" | undefined;
        }, {
            key: string;
            type?: "hexKey" | undefined;
        }>, z.ZodObject<{
            type: z.ZodOptional<z.ZodLiteral<"aws">>;
            id: z.ZodString;
            region: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            region: string;
            type?: "aws" | undefined;
        }, {
            id: string;
            region: string;
            type?: "aws" | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"node">;
        }, "strip", z.ZodTypeAny, {
            type: "node";
        }, {
            type: "node";
        }>]>>;
        index: z.ZodOptional<z.ZodObject<{
            from: z.ZodOptional<z.ZodNumber>;
            chunk: z.ZodOptional<z.ZodNumber>;
            mode: z.ZodOptional<z.ZodNativeEnum<typeof AgentIndexMode>>;
        }, "strip", z.ZodTypeAny, {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        }, {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>>, Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>, Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>>;
    defaultSigner: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        type?: "hexKey" | undefined;
    }, {
        key: string;
        type?: "hexKey" | undefined;
    }>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"aws">>;
        id: z.ZodString;
        region: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"node">;
    }, "strip", z.ZodTypeAny, {
        type: "node";
    }, {
        type: "node";
    }>]>>;
    defaultRpcConsensusType: z.ZodOptional<z.ZodNativeEnum<typeof AgentConsensusType>>;
    log: z.ZodOptional<z.ZodObject<{
        format: z.ZodOptional<z.ZodNativeEnum<typeof AgentLogFormat>>;
        level: z.ZodOptional<z.ZodNativeEnum<typeof AgentLogLevel>>;
    }, "strip", z.ZodTypeAny, {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    }, {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    }>>;
    db: z.ZodString;
    chainsToScrape: z.ZodString;
}, "strip", z.ZodTypeAny, {
    chains: Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>;
    db: string;
    chainsToScrape: string;
    metricsPort?: number | undefined;
    defaultSigner?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    defaultRpcConsensusType?: AgentConsensusType | undefined;
    log?: {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    } | undefined;
}, {
    chains: Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>;
    db: string;
    chainsToScrape: string;
    metricsPort?: number | undefined;
    defaultSigner?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    defaultRpcConsensusType?: AgentConsensusType | undefined;
    log?: {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    } | undefined;
}>;
export type ScraperConfig = z.infer<typeof ScraperAgentConfigSchema>;
export declare const ValidatorAgentConfigSchema: z.ZodObject<{
    metricsPort: z.ZodOptional<z.ZodNumber>;
    chains: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
        name: z.ZodString;
        protocol: z.ZodNativeEnum<typeof ProtocolType>;
        chainId: z.ZodNumber;
        interchainSecurityModule: z.ZodOptional<z.ZodString>;
        interchainGasPaymaster: z.ZodString;
        mailbox: z.ZodString;
        domainId: z.ZodOptional<z.ZodNumber>;
        displayName: z.ZodOptional<z.ZodString>;
        displayNameShort: z.ZodOptional<z.ZodString>;
        logoURI: z.ZodOptional<z.ZodString>;
        nativeToken: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            symbol: z.ZodString;
            decimals: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            symbol: string;
            name: string;
            decimals: number;
        }, {
            symbol: string;
            name: string;
            decimals: number;
        }>>;
        rpcUrls: z.ZodArray<z.ZodObject<{
            http: z.ZodString;
            webSocket: z.ZodOptional<z.ZodString>;
            pagination: z.ZodOptional<z.ZodObject<{
                maxBlockRange: z.ZodOptional<z.ZodNumber>;
                minBlockNumber: z.ZodOptional<z.ZodNumber>;
                maxBlockAge: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }>>;
            retry: z.ZodOptional<z.ZodObject<{
                maxRequests: z.ZodNumber;
                baseRetryMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxRequests: number;
                baseRetryMs: number;
            }, {
                maxRequests: number;
                baseRetryMs: number;
            }>>;
        }, "strip", z.ZodTypeAny, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }>, "atleastone">;
        blockExplorers: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            url: z.ZodString;
            apiUrl: z.ZodString;
            apiKey: z.ZodOptional<z.ZodString>;
            family: z.ZodOptional<z.ZodNativeEnum<typeof import("./chainMetadataTypes").ExplorerFamily>>;
        }, "strip", z.ZodTypeAny, {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }, {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }>, "many">>;
        blocks: z.ZodOptional<z.ZodObject<{
            confirmations: z.ZodNumber;
            reorgPeriod: z.ZodOptional<z.ZodNumber>;
            estimateBlockTime: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        }, {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        }>>;
        transactionOverrides: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        gasCurrencyCoinGeckoId: z.ZodOptional<z.ZodString>;
        gnosisSafeTransactionServiceUrl: z.ZodOptional<z.ZodString>;
        isTestnet: z.ZodOptional<z.ZodBoolean>;
        validatorAnnounce: z.ZodString;
        customRpcUrls: z.ZodOptional<z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
            http: z.ZodString;
            webSocket: z.ZodOptional<z.ZodString>;
            pagination: z.ZodOptional<z.ZodObject<{
                maxBlockRange: z.ZodOptional<z.ZodNumber>;
                minBlockNumber: z.ZodOptional<z.ZodNumber>;
                maxBlockAge: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }, {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            }>>;
            retry: z.ZodOptional<z.ZodObject<{
                maxRequests: z.ZodNumber;
                baseRetryMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                maxRequests: number;
                baseRetryMs: number;
            }, {
                maxRequests: number;
                baseRetryMs: number;
            }>>;
            priority: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>>, Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>, Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }>>>;
        rpcConsensusType: z.ZodOptional<z.ZodNativeEnum<typeof AgentConsensusType>>;
        signer: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            key: string;
            type?: "hexKey" | undefined;
        }, {
            key: string;
            type?: "hexKey" | undefined;
        }>, z.ZodObject<{
            type: z.ZodOptional<z.ZodLiteral<"aws">>;
            id: z.ZodString;
            region: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            region: string;
            type?: "aws" | undefined;
        }, {
            id: string;
            region: string;
            type?: "aws" | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"node">;
        }, "strip", z.ZodTypeAny, {
            type: "node";
        }, {
            type: "node";
        }>]>>;
        index: z.ZodOptional<z.ZodObject<{
            from: z.ZodOptional<z.ZodNumber>;
            chunk: z.ZodOptional<z.ZodNumber>;
            mode: z.ZodOptional<z.ZodNativeEnum<typeof AgentIndexMode>>;
        }, "strip", z.ZodTypeAny, {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        }, {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>>, Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>, Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>>;
    defaultSigner: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        type?: "hexKey" | undefined;
    }, {
        key: string;
        type?: "hexKey" | undefined;
    }>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"aws">>;
        id: z.ZodString;
        region: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"node">;
    }, "strip", z.ZodTypeAny, {
        type: "node";
    }, {
        type: "node";
    }>]>>;
    defaultRpcConsensusType: z.ZodOptional<z.ZodNativeEnum<typeof AgentConsensusType>>;
    log: z.ZodOptional<z.ZodObject<{
        format: z.ZodOptional<z.ZodNativeEnum<typeof AgentLogFormat>>;
        level: z.ZodOptional<z.ZodNativeEnum<typeof AgentLogLevel>>;
    }, "strip", z.ZodTypeAny, {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    }, {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    }>>;
    db: z.ZodOptional<z.ZodString>;
    originChainName: z.ZodString;
    validator: z.ZodUnion<[z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"hexKey">>;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        key: string;
        type?: "hexKey" | undefined;
    }, {
        key: string;
        type?: "hexKey" | undefined;
    }>, z.ZodObject<{
        type: z.ZodOptional<z.ZodLiteral<"aws">>;
        id: z.ZodString;
        region: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }, {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"node">;
    }, "strip", z.ZodTypeAny, {
        type: "node";
    }, {
        type: "node";
    }>]>;
    checkpointSyncer: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"localStorage">;
        path: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "localStorage";
        path: string;
    }, {
        type: "localStorage";
        path: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"s3">;
        bucket: z.ZodString;
        region: z.ZodString;
        folder: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: "s3";
        region: string;
        bucket: string;
        folder?: string | undefined;
    }, {
        type: "s3";
        region: string;
        bucket: string;
        folder?: string | undefined;
    }>]>;
    interval: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    chains: Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>;
    originChainName: string;
    validator: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | ({
        key: string;
        type?: "hexKey" | undefined;
    } & {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }) | ({
        id: string;
        region: string;
        type?: "aws" | undefined;
    } & {
        key: string;
        type?: "hexKey" | undefined;
    });
    checkpointSyncer: {
        type: "localStorage";
        path: string;
    } | {
        type: "s3";
        region: string;
        bucket: string;
        folder?: string | undefined;
    };
    metricsPort?: number | undefined;
    defaultSigner?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    defaultRpcConsensusType?: AgentConsensusType | undefined;
    log?: {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    } | undefined;
    db?: string | undefined;
    interval?: number | undefined;
}, {
    chains: Record<string, {
        name: string;
        protocol: ProtocolType;
        chainId: number;
        interchainGasPaymaster: string;
        mailbox: string;
        rpcUrls: [{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }, ...{
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
        }[]];
        validatorAnnounce: string;
        interchainSecurityModule?: string | undefined;
        domainId?: number | undefined;
        displayName?: string | undefined;
        displayNameShort?: string | undefined;
        logoURI?: string | undefined;
        nativeToken?: {
            symbol: string;
            name: string;
            decimals: number;
        } | undefined;
        blockExplorers?: {
            url: string;
            name: string;
            apiUrl: string;
            apiKey?: string | undefined;
            family?: import("./chainMetadataTypes").ExplorerFamily | undefined;
        }[] | undefined;
        blocks?: {
            confirmations: number;
            reorgPeriod?: number | undefined;
            estimateBlockTime?: number | undefined;
        } | undefined;
        transactionOverrides?: {} | undefined;
        gasCurrencyCoinGeckoId?: string | undefined;
        gnosisSafeTransactionServiceUrl?: string | undefined;
        isTestnet?: boolean | undefined;
        customRpcUrls?: Record<string, {
            http: string;
            webSocket?: string | undefined;
            pagination?: {
                maxBlockRange?: number | undefined;
                minBlockNumber?: number | undefined;
                maxBlockAge?: number | undefined;
            } | undefined;
            retry?: {
                maxRequests: number;
                baseRetryMs: number;
            } | undefined;
            priority?: number | undefined;
        }> | undefined;
        rpcConsensusType?: AgentConsensusType | undefined;
        signer?: {
            key: string;
            type?: "hexKey" | undefined;
        } | {
            id: string;
            region: string;
            type?: "aws" | undefined;
        } | {
            type: "node";
        } | undefined;
        index?: {
            from?: number | undefined;
            chunk?: number | undefined;
            mode?: AgentIndexMode | undefined;
        } | undefined;
    }>;
    originChainName: string;
    validator: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | ({
        key: string;
        type?: "hexKey" | undefined;
    } & {
        id: string;
        region: string;
        type?: "aws" | undefined;
    }) | ({
        id: string;
        region: string;
        type?: "aws" | undefined;
    } & {
        key: string;
        type?: "hexKey" | undefined;
    });
    checkpointSyncer: {
        type: "localStorage";
        path: string;
    } | {
        type: "s3";
        region: string;
        bucket: string;
        folder?: string | undefined;
    };
    metricsPort?: number | undefined;
    defaultSigner?: {
        key: string;
        type?: "hexKey" | undefined;
    } | {
        id: string;
        region: string;
        type?: "aws" | undefined;
    } | {
        type: "node";
    } | undefined;
    defaultRpcConsensusType?: AgentConsensusType | undefined;
    log?: {
        format?: AgentLogFormat | undefined;
        level?: AgentLogLevel | undefined;
    } | undefined;
    db?: string | undefined;
    interval?: number | undefined;
}>;
export type ValidatorConfig = z.infer<typeof ValidatorAgentConfigSchema>;
export type AgentConfigV2 = z.infer<typeof AgentConfigSchema>;
/**
 * Deprecated agent config shapes.
 * See https://github.com/hyperlane-xyz/hyperlane-monorepo/issues/2215
 */
export interface AgentSigner {
    key: string;
    type: string;
}
export type AgentConnection = {
    type: AgentConnectionType.Http;
    url: string;
} | {
    type: AgentConnectionType.Ws;
    url: string;
} | {
    type: AgentConnectionType.HttpQuorum;
    urls: string;
} | {
    type: AgentConnectionType.HttpFallback;
    urls: string;
};
export interface AgentChainSetupBase {
    name: ChainName;
    domain: number;
    signer?: AgentSigner;
    finalityBlocks: number;
    addresses: HyperlaneDeploymentArtifacts;
    protocol: ProtocolType;
    connection?: AgentConnection;
    index?: {
        from: number;
    };
}
export interface AgentChainSetup extends AgentChainSetupBase {
    signer: AgentSigner;
    connection: AgentConnection;
}
export interface AgentConfig {
    chains: Partial<ChainMap<AgentChainSetupBase>>;
    tracing?: {
        level?: string;
        fmt?: 'json';
    };
}
/**
 * Utilities for generating agent configs from metadata / artifacts.
 */
export declare function buildAgentConfigNew(chains: ChainName[], multiProvider: MultiProvider, addresses: ChainMap<HyperlaneDeploymentArtifacts>, startBlocks: ChainMap<number>): ChainMap<AgentChainMetadata>;
export declare function buildAgentConfigDeprecated(chains: ChainName[], multiProvider: MultiProvider, addresses: ChainMap<HyperlaneDeploymentArtifacts>, startBlocks: ChainMap<number>): AgentConfig;
export type CombinedAgentConfig = AgentConfigV2['chains'] | AgentConfig;
export declare function buildAgentConfig(chains: ChainName[], multiProvider: MultiProvider, addresses: ChainMap<HyperlaneDeploymentArtifacts>, startBlocks: ChainMap<number>): CombinedAgentConfig;
export {};
//# sourceMappingURL=agentConfig.d.ts.map