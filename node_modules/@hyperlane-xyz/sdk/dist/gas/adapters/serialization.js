"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SealevelOverheadIgpDataSchema = exports.SealevelOverheadIgpData = exports.SealevelInterchainGasPaymasterConfigSchema = exports.SealevelInterchainGasPaymasterConfig = exports.SealevelInterchainGasPaymasterType = void 0;
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
const web3_js_1 = require("@solana/web3.js");
const sealevelSerialization_1 = require("../../utils/sealevelSerialization");
// Should match https://github.com/hyperlane-xyz/hyperlane-monorepo/blob/main/rust/sealevel/programs/hyperlane-sealevel-igp/src/accounts.rs#L24
var SealevelInterchainGasPaymasterType;
(function (SealevelInterchainGasPaymasterType) {
    // An IGP with gas oracles and that receives lamports as payment.
    SealevelInterchainGasPaymasterType[SealevelInterchainGasPaymasterType["Igp"] = 0] = "Igp";
    // An overhead IGP that points to an inner IGP and imposes a gas overhead for each destination domain.
    SealevelInterchainGasPaymasterType[SealevelInterchainGasPaymasterType["OverheadIgp"] = 1] = "OverheadIgp";
})(SealevelInterchainGasPaymasterType || (exports.SealevelInterchainGasPaymasterType = SealevelInterchainGasPaymasterType = {}));
/**
 * IGP Config Borsh Schema
 */
// Config schema, e.g. for use in token data
class SealevelInterchainGasPaymasterConfig {
    constructor(fields) {
        this.fields = fields;
        Object.assign(this, fields);
        this.program_id_pubkey = new web3_js_1.PublicKey(this.program_id);
        this.igp_account_pub_key = this.igp_account
            ? new web3_js_1.PublicKey(this.igp_account)
            : undefined;
    }
}
exports.SealevelInterchainGasPaymasterConfig = SealevelInterchainGasPaymasterConfig;
exports.SealevelInterchainGasPaymasterConfigSchema = {
    kind: 'struct',
    fields: [
        ['program_id', [32]],
        ['type', 'u8'],
        ['igp_account', [32]],
    ],
};
/**
 * IGP Program Data Borsh Schema
 */
// Should match https://github.com/hyperlane-xyz/hyperlane-monorepo/blob/main/rust/sealevel/programs/hyperlane-sealevel-igp/src/accounts.rs#L91
class SealevelOverheadIgpData {
    constructor(fields) {
        this.fields = fields;
        Object.assign(this, fields);
        this.owner_pub_key = this.owner ? new web3_js_1.PublicKey(this.owner) : undefined;
        this.inner_pub_key = new web3_js_1.PublicKey(this.inner);
    }
}
exports.SealevelOverheadIgpData = SealevelOverheadIgpData;
exports.SealevelOverheadIgpDataSchema = new Map([
    [
        sealevelSerialization_1.SealevelAccountDataWrapper,
        (0, sealevelSerialization_1.getSealevelAccountDataSchema)(SealevelOverheadIgpData, [8]),
    ],
    [
        SealevelOverheadIgpData,
        {
            kind: 'struct',
            fields: [
                ['bump', 'u8'],
                ['salt', [32]],
                ['owner', { kind: 'option', type: [32] }],
                ['inner', [32]],
                ['gas_overheads', { kind: 'map', key: 'u32', value: 'u64' }],
            ],
        },
    ],
]);
//# sourceMappingURL=serialization.js.map