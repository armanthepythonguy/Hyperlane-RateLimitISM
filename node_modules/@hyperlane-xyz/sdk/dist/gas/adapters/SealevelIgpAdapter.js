"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SealevelOverheadIgpAdapter = void 0;
const web3_js_1 = require("@solana/web3.js");
const borsh_1 = require("borsh");
const MultiProtocolApp_1 = require("../../app/MultiProtocolApp");
const sealevelSerialization_1 = require("../../utils/sealevelSerialization");
const serialization_1 = require("./serialization");
class SealevelOverheadIgpAdapter extends MultiProtocolApp_1.BaseSealevelAdapter {
    constructor(chainName, multiProvider, addresses) {
        super(chainName, multiProvider, addresses);
        this.chainName = chainName;
        this.multiProvider = multiProvider;
        this.addresses = addresses;
    }
    async getAccountInfo() {
        const address = this.addresses.igp;
        const connection = this.getProvider();
        const accountInfo = await connection.getAccountInfo(new web3_js_1.PublicKey(address));
        if (!accountInfo)
            throw new Error(`No account info found for ${address}}`);
        const accountData = (0, borsh_1.deserializeUnchecked)(serialization_1.SealevelOverheadIgpDataSchema, sealevelSerialization_1.SealevelAccountDataWrapper, accountInfo.data);
        return accountData.data;
    }
    // https://github.com/hyperlane-xyz/hyperlane-monorepo/blob/main/rust/sealevel/programs/hyperlane-sealevel-igp/src/pda_seeds.rs#L7
    static deriveIgpProgramPda(igpProgramId) {
        return super.derivePda(['hyperlane_igp', '-', 'program_data'], igpProgramId);
    }
    // https://github.com/hyperlane-xyz/hyperlane-monorepo/blob/main/rust/sealevel/programs/hyperlane-sealevel-igp/src/pda_seeds.rs#L62
    static deriveGasPaymentPda(igpProgramId, randomWalletPubKey) {
        return super.derivePda(['hyperlane_igp', '-', 'gas_payment', '-', randomWalletPubKey.toBuffer()], igpProgramId);
    }
}
exports.SealevelOverheadIgpAdapter = SealevelOverheadIgpAdapter;
//# sourceMappingURL=SealevelIgpAdapter.js.map