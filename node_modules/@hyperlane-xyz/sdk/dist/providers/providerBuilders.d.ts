import { providers } from 'ethers';
import { ProtocolType } from '@hyperlane-xyz/utils';
import { ChainMetadata } from '../metadata/chainMetadataTypes';
import { EthersV5Provider, ProviderType, SolanaWeb3Provider, TypedProvider, ViemProvider } from './ProviderType';
import { RetryProviderOptions } from './RetryProvider';
export type ProviderBuilderFn<P> = (rpcUrls: ChainMetadata['rpcUrls'], network: number | string, retryOverride?: RetryProviderOptions) => P;
export type TypedProviderBuilderFn = ProviderBuilderFn<TypedProvider>;
export declare const DEFAULT_RETRY_OPTIONS: RetryProviderOptions;
export declare function defaultEthersV5ProviderBuilder(rpcUrls: ChainMetadata['rpcUrls'], network: number | string, retryOverride?: RetryProviderOptions): EthersV5Provider;
export declare function defaultViemProviderBuilder(rpcUrls: ChainMetadata['rpcUrls'], network: number | string): ViemProvider;
export declare function defaultSolProviderBuilder(rpcUrls: ChainMetadata['rpcUrls'], _network: number | string): SolanaWeb3Provider;
export declare function defaultFuelProviderBuilder(rpcUrls: ChainMetadata['rpcUrls'], _network: number | string): EthersV5Provider;
export declare function defaultProviderBuilder(rpcUrls: ChainMetadata['rpcUrls'], _network: number | string): providers.Provider;
export type ProviderBuilderMap = Record<ProviderType, ProviderBuilderFn<TypedProvider>>;
export declare const defaultProviderBuilderMap: ProviderBuilderMap;
export declare const protocolToDefaultProviderBuilder: Record<ProtocolType, ProviderBuilderFn<TypedProvider>>;
//# sourceMappingURL=providerBuilders.d.ts.map