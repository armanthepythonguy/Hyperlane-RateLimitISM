import { Debugger } from 'debug';
import { ProtocolType } from '@hyperlane-xyz/utils';
import { ChainMetadataManager } from '../metadata/ChainMetadataManager';
import type { ChainMetadata } from '../metadata/chainMetadataTypes';
import type { ChainMap, ChainName } from '../types';
import { MultiProvider, MultiProviderOptions } from './MultiProvider';
import { EthersV5Provider, ProviderMap, ProviderType, SolanaWeb3Provider, TypedProvider, ViemProvider } from './ProviderType';
import { ProviderBuilderMap } from './providerBuilders';
export declare const PROTOCOL_DEFAULT_PROVIDER_TYPE: Partial<Record<ProtocolType, ProviderType>>;
export interface MultiProtocolProviderOptions {
    loggerName?: string;
    providers?: ChainMap<ProviderMap<TypedProvider>>;
    providerBuilders?: Partial<ProviderBuilderMap>;
}
/**
 * A version of MultiProvider that can support different
 * provider types across different protocol types.
 *
 * This uses a different interface for provider/signer related methods
 * so it isn't strictly backwards compatible with MultiProvider.
 *
 * Unlike MultiProvider, this class does not support signer/signing methods (yet).
 * @typeParam MetaExt - Extra metadata fields for chains (such as contract addresses)
 */
export declare class MultiProtocolProvider<MetaExt = {}> extends ChainMetadataManager<MetaExt> {
    protected readonly options: MultiProtocolProviderOptions;
    protected readonly providers: ChainMap<ProviderMap<TypedProvider>>;
    protected signers: ChainMap<ProviderMap<never>>;
    protected readonly providerBuilders: Partial<ProviderBuilderMap>;
    readonly logger: Debugger;
    constructor(chainMetadata?: ChainMap<ChainMetadata<MetaExt>>, options?: MultiProtocolProviderOptions);
    static fromMultiProvider<MetaExt = {}>(mp: MultiProvider<MetaExt>, options?: MultiProtocolProviderOptions): MultiProtocolProvider<MetaExt>;
    toMultiProvider(options?: MultiProviderOptions): MultiProvider<MetaExt>;
    extendChainMetadata<NewExt = {}>(additionalMetadata: ChainMap<NewExt>): MultiProtocolProvider<MetaExt & NewExt>;
    tryGetProvider(chainNameOrId: ChainName | number, type?: ProviderType): TypedProvider | null;
    getProvider(chainNameOrId: ChainName | number, type?: ProviderType): TypedProvider;
    getEthersV5Provider(chainNameOrId: ChainName | number): EthersV5Provider['provider'];
    getViemProvider(chainNameOrId: ChainName | number): ViemProvider['provider'];
    getSolanaWeb3Provider(chainNameOrId: ChainName | number): SolanaWeb3Provider['provider'];
    setProvider(chainNameOrId: ChainName | number, provider: TypedProvider): TypedProvider;
    setProviders(providers: ChainMap<TypedProvider>): void;
    intersect(chains: ChainName[], throwIfNotSubset?: boolean): {
        intersection: ChainName[];
        result: MultiProtocolProvider<MetaExt>;
    };
}
//# sourceMappingURL=MultiProtocolProvider.d.ts.map