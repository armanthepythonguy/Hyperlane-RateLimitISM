import type { Connection, Transaction as SolTransaction, VersionedTransactionResponse as SolTransactionReceipt } from '@solana/web3.js';
import type { Contract as EV5Contract, providers as EV5Providers, PopulatedTransaction as EV5Transaction } from 'ethers';
import type { GetContractReturnType, PublicClient, Transaction as VTransaction, TransactionReceipt as VTransactionReceipt } from 'viem';
export declare enum ProviderType {
    EthersV5 = "ethers-v5",
    Viem = "viem",
    SolanaWeb3 = "solana-web3"
}
export type ProviderMap<Value> = Partial<Record<ProviderType, Value>>;
/**
 * Providers with discriminated union of type
 */
interface TypedProviderBase<T> {
    type: ProviderType;
    provider: T;
}
export interface EthersV5Provider extends TypedProviderBase<EV5Providers.Provider> {
    type: ProviderType.EthersV5;
    provider: EV5Providers.Provider;
}
export interface ViemProvider extends TypedProviderBase<PublicClient> {
    type: ProviderType.Viem;
    provider: PublicClient;
}
export interface SolanaWeb3Provider extends TypedProviderBase<Connection> {
    type: ProviderType.SolanaWeb3;
    provider: Connection;
}
export type TypedProvider = EthersV5Provider | ViemProvider | SolanaWeb3Provider;
/**
 * Contracts with discriminated union of provider type
 */
interface TypedContractBase<T> {
    type: ProviderType;
    contract: T;
}
export interface EthersV5Contract extends TypedContractBase<EV5Contract> {
    type: ProviderType.EthersV5;
    transaction: EV5Contract;
}
export interface ViemContract extends TypedContractBase<GetContractReturnType> {
    type: ProviderType.Viem;
    transaction: GetContractReturnType;
}
export interface SolanaWeb3Contract extends TypedContractBase<never> {
    type: ProviderType.SolanaWeb3;
    transaction: never;
}
export type TypedContract = EthersV5Contract | ViemContract | SolanaWeb3Contract;
/**
 * Transactions with discriminated union of provider type
 */
interface TypedTransactionBase<T> {
    type: ProviderType;
    transaction: T;
}
export interface EthersV5Transaction extends TypedTransactionBase<EV5Transaction> {
    type: ProviderType.EthersV5;
    transaction: EV5Transaction;
}
export interface ViemTransaction extends TypedTransactionBase<VTransaction> {
    type: ProviderType.Viem;
    transaction: VTransaction;
}
export interface SolanaWeb3Transaction extends TypedTransactionBase<SolTransaction> {
    type: ProviderType.SolanaWeb3;
    transaction: SolTransaction;
}
export type TypedTransaction = EthersV5Transaction | ViemTransaction | SolanaWeb3Transaction;
/**
 * Transaction receipt/response with discriminated union of provider type
 */
interface TypedTransactionReceiptBase<T> {
    type: ProviderType;
    receipt: T;
}
export interface EthersV5TransactionReceipt extends TypedTransactionReceiptBase<EV5Providers.TransactionReceipt> {
    type: ProviderType.EthersV5;
    receipt: EV5Providers.TransactionReceipt;
}
export interface ViemTransactionReceipt extends TypedTransactionReceiptBase<VTransactionReceipt> {
    type: ProviderType.Viem;
    receipt: VTransactionReceipt;
}
export interface SolanaWeb3TransactionReceipt extends TypedTransactionReceiptBase<SolTransactionReceipt> {
    type: ProviderType.SolanaWeb3;
    receipt: SolTransactionReceipt;
}
export type TypedTransactionReceipt = EthersV5TransactionReceipt | ViemTransactionReceipt | SolanaWeb3TransactionReceipt;
export {};
//# sourceMappingURL=ProviderType.d.ts.map