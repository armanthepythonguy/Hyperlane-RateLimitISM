"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.protocolToDefaultProviderBuilder = exports.defaultProviderBuilderMap = exports.defaultProviderBuilder = exports.defaultFuelProviderBuilder = exports.defaultSolProviderBuilder = exports.defaultViemProviderBuilder = exports.defaultEthersV5ProviderBuilder = exports.DEFAULT_RETRY_OPTIONS = void 0;
const web3_js_1 = require("@solana/web3.js");
const ethers_1 = require("ethers");
const viem_1 = require("viem");
const utils_1 = require("@hyperlane-xyz/utils");
const ProviderType_1 = require("./ProviderType");
const RetryProvider_1 = require("./RetryProvider");
exports.DEFAULT_RETRY_OPTIONS = {
    maxRequests: 3,
    baseRetryMs: 250,
};
function defaultEthersV5ProviderBuilder(rpcUrls, network, retryOverride) {
    const createProvider = (r) => {
        const retry = r.retry || retryOverride;
        return retry
            ? new RetryProvider_1.RetryJsonRpcProvider(retry, r.http, network)
            : new ethers_1.providers.StaticJsonRpcProvider(r.http, network);
    };
    let provider;
    if (rpcUrls.length > 1) {
        provider = new ethers_1.providers.FallbackProvider(rpcUrls.map(createProvider), 1);
    }
    else if (rpcUrls.length === 1) {
        provider = createProvider(rpcUrls[0]);
    }
    else {
        throw new Error('No RPC URLs provided');
    }
    return { type: ProviderType_1.ProviderType.EthersV5, provider };
}
exports.defaultEthersV5ProviderBuilder = defaultEthersV5ProviderBuilder;
// export function defaultEthersV6ProviderBuilder(
//   rpcUrls: ChainMetadata['rpcUrls'],
//   network: number | string,
// ): EthersV6Provider {
//   // TODO add support for retry providers here
//   if (!rpcUrls.length) throw new Error('No RPC URLs provided');
//   return {
//     type: ProviderType.EthersV6,
//     provider: new Ev6JsonRpcProvider(rpcUrls[0].http, network),
//   };
// }
function defaultViemProviderBuilder(rpcUrls, network) {
    if (!rpcUrls.length)
        throw new Error('No RPC URLs provided');
    if (!(0, utils_1.isNumeric)(network))
        throw new Error('Viem requires a numeric network');
    const id = parseInt(network.toString(), 10);
    const name = network.toString(); // TODO get more descriptive name
    const url = rpcUrls[0].http;
    const client = (0, viem_1.createPublicClient)({
        chain: {
            id,
            name,
            network: name,
            nativeCurrency: { name: '', symbol: '', decimals: 0 },
            rpcUrls: { default: { http: [url] }, public: { http: [url] } },
        },
        transport: (0, viem_1.http)(rpcUrls[0].http),
    });
    return { type: ProviderType_1.ProviderType.Viem, provider: client };
}
exports.defaultViemProviderBuilder = defaultViemProviderBuilder;
function defaultSolProviderBuilder(rpcUrls, _network) {
    if (!rpcUrls.length)
        throw new Error('No RPC URLs provided');
    return {
        type: ProviderType_1.ProviderType.SolanaWeb3,
        provider: new web3_js_1.Connection(rpcUrls[0].http, 'confirmed'),
    };
}
exports.defaultSolProviderBuilder = defaultSolProviderBuilder;
function defaultFuelProviderBuilder(rpcUrls, _network) {
    if (!rpcUrls.length)
        throw new Error('No RPC URLs provided');
    throw new Error('TODO fuel support');
}
exports.defaultFuelProviderBuilder = defaultFuelProviderBuilder;
// Kept for backwards compatibility
function defaultProviderBuilder(rpcUrls, _network) {
    return defaultEthersV5ProviderBuilder(rpcUrls, _network).provider;
}
exports.defaultProviderBuilder = defaultProviderBuilder;
exports.defaultProviderBuilderMap = {
    [ProviderType_1.ProviderType.EthersV5]: defaultEthersV5ProviderBuilder,
    // [ProviderType.EthersV6]: defaultEthersV6ProviderBuilder,
    [ProviderType_1.ProviderType.Viem]: defaultViemProviderBuilder,
    [ProviderType_1.ProviderType.SolanaWeb3]: defaultSolProviderBuilder,
};
exports.protocolToDefaultProviderBuilder = {
    [utils_1.ProtocolType.Ethereum]: defaultEthersV5ProviderBuilder,
    [utils_1.ProtocolType.Sealevel]: defaultSolProviderBuilder,
    [utils_1.ProtocolType.Fuel]: defaultFuelProviderBuilder,
};
//# sourceMappingURL=providerBuilders.js.map