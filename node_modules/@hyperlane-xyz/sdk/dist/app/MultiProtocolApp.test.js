"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const utils_1 = require("@hyperlane-xyz/utils");
const chains_1 = require("../consts/chains");
const MultiProtocolProvider_1 = require("../providers/MultiProtocolProvider");
const MultiProtocolApp_1 = require("./MultiProtocolApp");
class TestMultiProtocolApp extends MultiProtocolApp_1.MultiProtocolApp {
    protocolToAdapter(protocol) {
        if (protocol === utils_1.ProtocolType.Ethereum)
            return MultiProtocolApp_1.BaseEvmAdapter;
        if (protocol === utils_1.ProtocolType.Sealevel)
            return MultiProtocolApp_1.BaseSealevelAdapter;
        throw new Error(`No adapter for protocol ${protocol}`);
    }
}
describe('MultiProtocolApp', () => {
    describe('constructs', () => {
        const multiProvider = new MultiProtocolProvider_1.MultiProtocolProvider();
        it('creates an app class and gleans types from generic', async () => {
            const app = new TestMultiProtocolApp(multiProvider, {});
            (0, chai_1.expect)(app).to.be.instanceOf(MultiProtocolApp_1.MultiProtocolApp);
            (0, chai_1.expect)(app.adapter(chains_1.Chains.ethereum).protocol).to.eql(utils_1.ProtocolType.Ethereum);
        });
    });
});
//# sourceMappingURL=MultiProtocolApp.test.js.map