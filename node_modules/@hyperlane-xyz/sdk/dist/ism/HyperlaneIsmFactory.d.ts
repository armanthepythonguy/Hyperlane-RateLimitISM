import { Address } from '@hyperlane-xyz/utils';
import { HyperlaneApp } from '../app/HyperlaneApp';
import { HyperlaneEnvironment } from '../consts/environments';
import { HyperlaneAddressesMap, HyperlaneContracts } from '../contracts/types';
import { MultiProvider } from '../providers/MultiProvider';
import { ChainName } from '../types';
import { IsmFactoryFactories } from './contracts';
import { DeployedIsm, IsmConfig } from './types';
export declare class HyperlaneIsmFactory extends HyperlaneApp<IsmFactoryFactories> {
    static fromEnvironment<Env extends HyperlaneEnvironment>(env: Env, multiProvider: MultiProvider): HyperlaneIsmFactory;
    static fromAddressesMap(addressesMap: HyperlaneAddressesMap<any>, multiProvider: MultiProvider): HyperlaneIsmFactory;
    deploy(chain: ChainName, config: IsmConfig, origin?: ChainName): Promise<DeployedIsm>;
    private deployMultisigIsm;
    private deployRoutingIsm;
    private deployAggregationIsm;
    private deployMOfNFactory;
}
export declare function moduleCanCertainlyVerify(destModule: Address | IsmConfig, multiProvider: MultiProvider, origin: ChainName, destination: ChainName): Promise<boolean>;
export declare function moduleMatchesConfig(chain: ChainName, moduleAddress: Address, config: IsmConfig, multiProvider: MultiProvider, contracts: HyperlaneContracts<IsmFactoryFactories>, origin?: ChainName): Promise<boolean>;
export declare function collectValidators(origin: ChainName, config: IsmConfig): Set<string>;
//# sourceMappingURL=HyperlaneIsmFactory.d.ts.map