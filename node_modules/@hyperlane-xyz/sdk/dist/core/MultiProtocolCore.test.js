"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const ethers_1 = require("ethers");
const chainMetadata_1 = require("../consts/chainMetadata");
const chains_1 = require("../consts/chains");
const MultiProtocolProvider_1 = require("../providers/MultiProtocolProvider");
const MultiProtocolCore_1 = require("./MultiProtocolCore");
const EvmCoreAdapter_1 = require("./adapters/EvmCoreAdapter");
describe('MultiProtocolCore', () => {
    describe('constructs', () => {
        it('with constructor', async () => {
            const multiProvider = new MultiProtocolProvider_1.MultiProtocolProvider({
                ethereum: {
                    ...chainMetadata_1.ethereum,
                },
            });
            const core = new MultiProtocolCore_1.MultiProtocolCore(multiProvider, {
                ethereum: {
                    validatorAnnounce: ethers_1.ethers.constants.AddressZero,
                    proxyAdmin: ethers_1.ethers.constants.AddressZero,
                    mailbox: ethers_1.ethers.constants.AddressZero,
                },
            });
            (0, chai_1.expect)(core).to.be.instanceOf(MultiProtocolCore_1.MultiProtocolCore);
            const ethAdapter = core.adapter(chains_1.Chains.ethereum);
            (0, chai_1.expect)(ethAdapter).to.be.instanceOf(EvmCoreAdapter_1.EvmCoreAdapter);
        });
        it('from environment', async () => {
            const multiProvider = new MultiProtocolProvider_1.MultiProtocolProvider();
            const core = MultiProtocolCore_1.MultiProtocolCore.fromEnvironment('mainnet', multiProvider);
            (0, chai_1.expect)(core).to.be.instanceOf(MultiProtocolCore_1.MultiProtocolCore);
            const ethAdapter = core.adapter(chains_1.Chains.ethereum);
            (0, chai_1.expect)(ethAdapter).to.be.instanceOf(EvmCoreAdapter_1.EvmCoreAdapter);
        });
    });
});
//# sourceMappingURL=MultiProtocolCore.test.js.map