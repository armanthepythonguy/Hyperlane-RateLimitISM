import { Mailbox, ValidatorAnnounce } from '@hyperlane-xyz/core';
import { Address } from '@hyperlane-xyz/utils';
import { HyperlaneContracts } from '../contracts/types';
import { HyperlaneDeployer } from '../deploy/HyperlaneDeployer';
import { HyperlaneIsmFactory } from '../ism/HyperlaneIsmFactory';
import { IsmConfig } from '../ism/types';
import { MultiProvider } from '../providers/MultiProvider';
import { ChainMap, ChainName } from '../types';
import { CoreFactories } from './contracts';
import { CoreConfig } from './types';
export declare class HyperlaneCoreDeployer extends HyperlaneDeployer<CoreConfig, CoreFactories> {
    readonly ismFactory: HyperlaneIsmFactory;
    startingBlockNumbers: ChainMap<number | undefined>;
    constructor(multiProvider: MultiProvider, ismFactory: HyperlaneIsmFactory);
    deployMailbox(chain: ChainName, ismConfig: IsmConfig, proxyAdmin: Address, owner: Address): Promise<Mailbox>;
    deployValidatorAnnounce(chain: ChainName, mailboxAddress: string): Promise<ValidatorAnnounce>;
    deployIsm(chain: ChainName, config: IsmConfig): Promise<Address>;
    deployContracts(chain: ChainName, config: CoreConfig): Promise<HyperlaneContracts<CoreFactories>>;
}
//# sourceMappingURL=HyperlaneCoreDeployer.d.ts.map