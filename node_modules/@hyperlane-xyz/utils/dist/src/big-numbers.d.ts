import { BigNumber, BigNumberish, FixedNumber } from 'ethers';
export declare function isBigNumberish(value: any): value is BigNumberish;
export declare function isZeroish(value: BigNumberish): boolean;
/**
 * Converts a BigNumber to a FixedNumber of the format fixed128x18.
 * @param big The BigNumber to convert.
 * @returns A FixedNumber representation of a BigNumber.
 */
export declare function bigToFixed(big: BigNumber): FixedNumber;
/**
 * Converts a FixedNumber (of any format) to a BigNumber.
 * @param fixed The FixedNumber to convert.
 * @param ceil If true, the ceiling of fixed is used. Otherwise, the floor is used.
 * @returns A BigNumber representation of a FixedNumber.
 */
export declare function fixedToBig(fixed: FixedNumber, ceil?: boolean): BigNumber;
/**
 * Multiplies a BigNumber by a FixedNumber, returning the BigNumber product.
 * @param big The BigNumber to multiply.
 * @param fixed The FixedNumber to multiply.
 * @param ceil If true, the ceiling of the product is used. Otherwise, the floor is used.
 * @returns The BigNumber product.
 */
export declare function mulBigAndFixed(big: BigNumber, fixed: FixedNumber, ceil?: boolean): BigNumber;
export declare function BigNumberMin(bn1: BigNumber, bn2: BigNumber): BigNumber;
export declare function BigNumberMax(bn1: BigNumber, bn2: BigNumber): BigNumber;
//# sourceMappingURL=big-numbers.d.ts.map