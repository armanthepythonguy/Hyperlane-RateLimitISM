import BigNumber from 'bignumber.js';
type NumberT = BigNumber.Value;
export declare function fromWei(value: NumberT | null | undefined, decimals?: number): number;
export declare function fromWeiRounded(value: NumberT | null | undefined, decimals?: number, roundDownIfSmall?: boolean): string;
export declare function toWei(value: NumberT | null | undefined, decimals?: number): BigNumber;
export declare function tryParseAmount(value: NumberT | null | undefined): BigNumber | null;
export declare function eqAmountApproximate(amountInWei1: BigNumber, amountInWei2: NumberT): boolean;
/**
 * Converts a value with `fromDecimals` decimals to a value with `toDecimals` decimals.
 * Incurs a loss of precision when `fromDecimals` > `toDecimals`.
 * @param fromDecimals The number of decimals `value` has.
 * @param toDecimals The number of decimals to convert `value` to.
 * @param value The value to convert.
 * @returns `value` represented with `toDecimals` decimals.
 */
export declare function convertDecimals(fromDecimals: number, toDecimals: number, value: NumberT): BigNumber;
export {};
//# sourceMappingURL=amount.d.ts.map