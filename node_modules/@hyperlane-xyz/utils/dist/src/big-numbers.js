"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigNumberMax = exports.BigNumberMin = exports.mulBigAndFixed = exports.fixedToBig = exports.bigToFixed = exports.isZeroish = exports.isBigNumberish = void 0;
const ethers_1 = require("ethers");
const typeof_1 = require("./typeof");
function isBigNumberish(value) {
    try {
        if ((0, typeof_1.isNullish)(value))
            return false;
        return ethers_1.BigNumber.from(value)._isBigNumber;
    }
    catch (error) {
        return false;
    }
}
exports.isBigNumberish = isBigNumberish;
// If a value (e.g. hex string or number) is zeroish (0, 0x0, 0x00, etc.)
function isZeroish(value) {
    try {
        if (!value ||
            value === ethers_1.constants.HashZero ||
            value === ethers_1.constants.AddressZero)
            return true;
        return ethers_1.BigNumber.from(value).isZero();
    }
    catch (error) {
        return false;
    }
}
exports.isZeroish = isZeroish;
/**
 * Converts a BigNumber to a FixedNumber of the format fixed128x18.
 * @param big The BigNumber to convert.
 * @returns A FixedNumber representation of a BigNumber.
 */
function bigToFixed(big) {
    return ethers_1.FixedNumber.from(big.toString());
}
exports.bigToFixed = bigToFixed;
/**
 * Converts a FixedNumber (of any format) to a BigNumber.
 * @param fixed The FixedNumber to convert.
 * @param ceil If true, the ceiling of fixed is used. Otherwise, the floor is used.
 * @returns A BigNumber representation of a FixedNumber.
 */
function fixedToBig(fixed, ceil = false) {
    const fixedAsInteger = ceil ? fixed.ceiling() : fixed.floor();
    return ethers_1.BigNumber.from(fixedAsInteger.toFormat('fixed256x0').toString());
}
exports.fixedToBig = fixedToBig;
/**
 * Multiplies a BigNumber by a FixedNumber, returning the BigNumber product.
 * @param big The BigNumber to multiply.
 * @param fixed The FixedNumber to multiply.
 * @param ceil If true, the ceiling of the product is used. Otherwise, the floor is used.
 * @returns The BigNumber product.
 */
function mulBigAndFixed(big, fixed, ceil = false) {
    // Converts big to a FixedNumber, multiplies it by fixed, and converts the product back
    // to a BigNumber.
    return fixedToBig(fixed.mulUnsafe(bigToFixed(big)), ceil);
}
exports.mulBigAndFixed = mulBigAndFixed;
function BigNumberMin(bn1, bn2) {
    return bn1.gte(bn2) ? bn2 : bn1;
}
exports.BigNumberMin = BigNumberMin;
function BigNumberMax(bn1, bn2) {
    return bn1.lte(bn2) ? bn2 : bn1;
}
exports.BigNumberMax = BigNumberMax;
//# sourceMappingURL=big-numbers.js.map